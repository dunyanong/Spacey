import { useState, useEffect } from "react";
import { useAuthState } from "react-firebase-hooks/auth";
import { useRouter } from "next/router";
import { collection, query, where, orderBy, limit, onSnapshot, doc, updateDoc, addDoc, deleteDoc, serverTimestamp, getDocs } from "firebase/firestore";
import { Box, VStack, Heading, Flex, Input, IconButton, Button, Text } from "@chakra-ui/react";
import { FaPlus } from "react-icons/fa";
import { useDisclosure } from "@chakra-ui/react";
import Calendar from 'react-calendar';
import 'react-calendar/dist/Calendar.css';
import styled from '@emotion/styled';
import { auth, db } from "../utils/firebase";
import Head from "next/head";
import { FaSmile, FaMeh, FaFrown } from 'react-icons/fa';
import Link from "next/link";

const AddSubTopic = () => {
    const [topic, setTopic] = useState({ topic: "" });
    const [message, setMessage] = useState({ schedule_detail: "", confidence: 50 });
    const [messages, setMessages] = useState([]);
    const [user, loading] = useAuthState(auth);
    const [selectedDate, setSelectedDate] = useState(new Date());
    const route = useRouter();
    const routeData = route.query;

    const submitMessage = async (e) => {
        e.preventDefault();
        if (!topic.topic) {
          console.log("No topic written");
          return;
        }
        if (topic.topic.length > 1000) {
          console.log("Topic is too long ðŸ¤¡");
          return;
        }
      
        try {
          if (topic?.hasOwnProperty("id")) {
            const docRef = doc(db, "schedule", topic.id);
            const updatedMessage = { 
              ...topic, 
              timestamp: serverTimestamp(), 
              date: selectedDate.toISOString(),
              confidence: message.confidence,
              avatar: user.photoURL,
              email: user.email,
              user: user.uid,
              username: user.displayName 
            };
            await updateDoc(docRef, updatedMessage);
            console.log("Document updated successfully:", updatedMessage);
          } else {
            const collectionRef = collection(db, "schedule");
            const newMessage = {
              ...topic,
              timestamp: serverTimestamp(),
              date: selectedDate.toISOString(),
              confidence: message.confidence,
              avatar: user.photoURL,
              email: user.email,
              user: user.uid,
              username: user.displayName
            };
            await addDoc(collectionRef, newMessage);
            console.log("Document added successfully:", newMessage);
            setTopic({ topic: "" });
            setMessage({ schedule_detail: "", confidence: 50 });
          }
        } catch (error) {
          console.error("Error adding or updating document: ", error);
        }
      };    
  
    return (
      <Box className="md:p-5 w-full max-w-3xl mx-auto pt-20">
        <Head>
          <title>FVG</title>
          <meta name="description" content="Generated by create next app" />
          <link
            rel="apple-touch-icon"
            sizes="180x180"
            href="/apple-touch-icon.png"
          />
          <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
          <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
          <link rel="manifest" href="/site.webmanifest" />
          <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5" />
          <meta name="msapplication-TileColor" content="#da532c" />
          <meta name="theme-color" content="#ffffff" />
        </Head>
        <VStack spacing={6} pt={10} pb={12} align="start">
          <Heading as="h1" size="xl">Add your subtopic</Heading>
          <Box as="form" onSubmit={submitMessage} w="full">
            <Flex mb={2} align="center" gap={2}>
              <Input
                placeholder="Your study plans"
                value={topic.topic}
                onChange={(e) => setTopic({ ...topic, topic: e.target.value })}
              />
              <IconButton
                icon={<FaPlus />}
                aria-label="Add"
                type="submit"
              />
            </Flex>
            <ResponsiveBox mb={2}>
              <Calendar onChange={setSelectedDate} value={selectedDate} />
            </ResponsiveBox>
            <div className="w-full flex flex-col items-center border border-gray-600 rounded-lg px-4 py-2 mb-3 relative overflow-hidden bg-background p-2">
              <div className="text-md font-medium">What is your confidence?</div>
              <div className="relative w-full">
                <label className="sr-only">Labels range</label>
                <input
                  type="range"
                  defaultValue="50"
                  min="0"
                  max="100"
                  className="w-full h-2 bg-gray-200 text-black rounded-lg appearance-none cursor-pointer"
                  onChange={(e) => setMessage({ ...message, confidence: e.target.value })}
                />
                <div className="w-full flex justify-between text-lg text-gray-500 -bottom-6">
                  <FaFrown style={{ color: 'red' }} />
                  <FaMeh style={{ color: 'orange' }} />
                  <FaSmile style={{ color: 'green' }} />
                </div>
              </div>
            </div>
  
            <div className='flex justify-between items-center'>
              <Link href="/a_level" passHref>
                <button className="mt-10 text-blue-500">Go back</button>
              </Link>
              <button className="mt-10 text-blue-500" type="submit">Submit</button>
            </div>
          </Box>
        </VStack>
      </Box>
    );
  };
  

export default AddSubTopic;

const ResponsiveBox = styled(Box)`
  display: flex;
  justify-content: center;
  max-width: 100%; /* Default max width */
  
  @media (min-width: 600px) {
    /* Medium screens */
    max-width: 600px; /* Adjust as needed */
  }

  @media (min-width: 900px) {
    /* Large screens */
    max-width: 800px; /* Adjust as needed */
  }
`;
