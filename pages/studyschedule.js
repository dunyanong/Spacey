import { Calendar } from 'react-calendar';
import 'react-calendar/dist/Calendar.css';
import { useAuthState } from "react-firebase-hooks/auth";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import {
  addDoc,
  collection,
  doc,
  serverTimestamp,
  updateDoc,
  query,
  orderBy,
  limit,
  onSnapshot,
  deleteDoc
} from "firebase/firestore";
import "react-toastify/dist/ReactToastify.css";
import { toast, ToastContainer } from "react-toastify";
import { auth, db } from "../utils/firebase";
import Head from "next/head";

const StudySchedule = () => {
  const [message, setMessage] = useState({ schedule_detail: "" });
  const [messages, setMessages] = useState([]);
  const [user, loading] = useAuthState(auth);
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [calendarOpen, setCalendarOpen] = useState(false);
  const [inputFocused, setInputFocused] = useState(false);  
  const route = useRouter();
  const routeData = route.query;
  

  const submitMessage = async (e) => {
    e.preventDefault();
    if (!message.schedule_detail) {
      console.log("No message written");
      return;
    }
    if (message.schedule_detail.length > 1000) {
      console.log("Message is too long ðŸ¤¡");
      return;
    }

    if (message?.hasOwnProperty("id")) {
      const docRef = doc(db, "schedule", message.id);
      const updatedMessage = { ...message, timestamp: serverTimestamp() };
      await updateDoc(docRef, updatedMessage);
      console.log("Success 1");
    } else {
      const collectionRef = collection(db, "schedule");
      await addDoc(collectionRef, {
        ...message,
        timestamp: serverTimestamp(),
        user: user.uid,
        avatar: user.photoURL,
        username: user.displayName,
        email: user.email,
        date: selectedDate.toISOString(),
      });      
      
      setMessage({ schedule_detail: "" });
      console.log("Success 1");
    }
  };

  useEffect(() => {
    const q = query(collection(db, "schedule"), orderBy("timestamp", "desc"), limit(10));
    const unsubscribe = onSnapshot(q, (snapshot) => {
      const messages = snapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));
      setMessages(messages);
    });

    return unsubscribe;
  }, []);

  const checkUser = async () => {
    if (loading) return;
    if (!user) route.push("/auth/Login");
    if (routeData.id) {
      setMessage({ schedule_detail: routeData.schedule_detail, id: routeData.id });
    }
  };

  useEffect(() => {
    checkUser();
  }, [user, loading]);

  // Group messages by date
  const groupedMessages = {};

  messages.forEach((msg) => {
    const date = new Date(msg.date);
    const today = new Date();
    const diffDays = Math.floor((date - today) / (1000 * 60 * 60 * 24));

    let heading = "";
    if (diffDays === 0) {
      heading = "Today";
    } else if (diffDays === 1) {
      heading = "Tomorrow";
    } else if (diffDays === -1) {
      heading = "Yesterday";
    } else {
      heading = date.toLocaleDateString(); // Format the date as desired
    }

    groupedMessages[heading] = groupedMessages[heading] || [];
    groupedMessages[heading].push(msg);
  });

  // Sort groupedMessages by date
  const sortedGroupedMessages = Object.keys(groupedMessages)
    .sort((a, b) => {
      // For "Today", "Tomorrow", and "Yesterday", they should always come first
      if (a === "Today" || a === "Tomorrow" || a === "Yesterday") return -1;
      if (b === "Today" || b === "Tomorrow" || b === "Yesterday") return 1;
      // For other dates, sort by date
      return new Date(a) - new Date(b);
    })
    .reduce((acc, key) => {
      acc[key] = groupedMessages[key];
      return acc;
    }, {});

  const handleToggleComplete = async (id) => {
    const docRef = doc(db, "schedule", id);
    await deleteDoc(docRef);
  };

  return (
    <div className="md:p-5 w-full max-w-3xl mx-auto pt-20">
      <Head>
        <title>FVG</title>
        <meta name="description" content="Generated by create next app" />
        <link
          rel="apple-touch-icon"
          sizes="180x180"
          href="/apple-touch-icon.png"
        />
        <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
        <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
        <link rel="manifest" href="/site.webmanifest" />
        <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5" />
        <meta name="msapplication-TileColor" content="#da532c" />
        <meta name="theme-color" content="#ffffff" />
      </Head>
      <section className="md:px-10 lg:px-20 grid items-center gap-6 pt-20 pb-8 md:pt-10 md:pb-12 lg:pt-3 lg:pb-10">
        <h1 className="text-2xl md:text-5xl font-bold ">Study List ðŸ“š</h1>
        <form
          style={{ opacity: 1 }}
          onSubmit={submitMessage}
          className="relative max-w-[500px] text-sm flex flex-col gap-2"
        >
        <input
          aria-label="Your message"
          placeholder="Your study plans"
          name="entry"
          type="text"
          required
          className="pl-4 pr-32 py-2 focus:ring-blue-500 focus:border-blue-500 block w-full border-neutral-300 rounded-md bg-gray-100 text-neutral-900"
          value={message.schedule_detail}
          onChange={(e) => setMessage({ ...message, schedule_detail: e.target.value })}
          onFocus={() => {
            setInputFocused(true);
            setCalendarOpen(true);
          }}
          onBlur={() => setInputFocused(false)}
        />

          {calendarOpen && (inputFocused || document.activeElement === document.body) && (
            <Calendar
              onChange={setSelectedDate}
              value={selectedDate}
              className="border-neutral-300 rounded-md bg-gray-100 text-neutral-900"
              onClickDay={() => setInputFocused(true)}
              onBlur={() => setCalendarOpen(false)}
            />
          )}

          <button
            className="flex items-center justify-center bg-blue-500 text-white rounded-md py-2"
            type="submit"
          >
            Submit
          </button>
        </form>



        {/* Display all messages */}
        <div className="mt-1">
        {Object.entries(sortedGroupedMessages).map(([heading, plans]) => (
          <div key={heading}>
            <h2 className="text-lg font-semibold mt-4">{heading}</h2>
            {plans.map((plan) => (
              <div key={plan.id} className="mb-4 text-sm flex gap-1 flex-col md:flex-row md:items-center">
                <p className="">{plan.schedule_detail}</p>
                <button onClick={() => handleToggleComplete(plan.id)}>
                  Complete
                </button>
              </div>
            ))}
          </div>
        ))}
        </div>
      </section>
    </div>
  );
};

export default StudySchedule;

