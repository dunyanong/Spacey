import { FaCalendarAlt, FaPlus } from "react-icons/fa";
import {
  Box,
  Button,
  Input,
  IconButton,
  useDisclosure,
  VStack,
  Heading,
  Flex
} from "@chakra-ui/react";
import { Calendar } from 'react-calendar';
import 'react-calendar/dist/Calendar.css';
import { useAuthState } from "react-firebase-hooks/auth";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import {
  addDoc,
  collection,
  doc,
  serverTimestamp,
  updateDoc,
  query,
  orderBy,
  limit,
  onSnapshot,
  deleteDoc
} from "firebase/firestore";
import "react-toastify/dist/ReactToastify.css";
import { auth, db } from "../utils/firebase";
import Head from "next/head";

const StudySchedule = () => {
  const [message, setMessage] = useState({ schedule_detail: "" });
  const [messages, setMessages] = useState([]);
  const [user, loading] = useAuthState(auth);
  const [selectedDate, setSelectedDate] = useState(new Date());
  const { isOpen, onOpen, onClose } = useDisclosure();
  const route = useRouter();
  const routeData = route.query;

  const submitMessage = async (e) => {
    e.preventDefault();
    if (!message.schedule_detail) {
      console.log("No message written");
      return;
    }
    if (message.schedule_detail.length > 1000) {
      console.log("Message is too long ðŸ¤¡");
      return;
    }

    if (message?.hasOwnProperty("id")) {
      const docRef = doc(db, "schedule", message.id);
      const updatedMessage = { ...message, timestamp: serverTimestamp() };
      await updateDoc(docRef, updatedMessage);
      console.log("Success 1");
    } else {
      const collectionRef = collection(db, "schedule");
      await addDoc(collectionRef, {
        ...message,
        timestamp: serverTimestamp(),
        user: user.uid,
        avatar: user.photoURL,
        username: user.displayName,
        email: user.email,
        date: selectedDate.toISOString(),
      });

      setMessage({ schedule_detail: "" });
      console.log("Success 1");
    }
  };

  useEffect(() => {
    const q = query(collection(db, "schedule"), orderBy("timestamp", "desc"), limit(10));
    const unsubscribe = onSnapshot(q, (snapshot) => {
      const messages = snapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));
      setMessages(messages);
    });

    return unsubscribe;
  }, []);

  const checkUser = async () => {
    if (loading) return;
    if (!user) route.push("/auth/Login");
    if (routeData.id) {
      setMessage({ schedule_detail: routeData.schedule_detail, id: routeData.id });
    }
  };

  useEffect(() => {
    checkUser();
  }, [user, loading]);

  const groupedMessages = {};

  messages.forEach((msg) => {
    const date = new Date(msg.date);
    const today = new Date();
    const diffDays = Math.floor((date - today) / (1000 * 60 * 60 * 24));
  
    let heading = "";
    if (diffDays === 0) {
      heading = "Today";
    } else if (diffDays === 1) {
      heading = "Tomorrow";
    } else if (diffDays === -1) {
      heading = "Yesterday";
    } else {
      heading = date.toLocaleDateString(); // Format the date as desired
    }
  
    groupedMessages[heading] = groupedMessages[heading] || [];
    groupedMessages[heading].push(msg);
  });
  

  const sortedGroupedMessages = Object.keys(groupedMessages)
    .sort((a, b) => {
      if (a === "Today" || a === "Tomorrow" || a === "Yesterday") return -1;
      if (b === "Today" || b === "Tomorrow" || b === "Yesterday") return 1;
      return new Date(a) - new Date(b);
    })
    .reduce((acc, key) => {
      acc[key] = groupedMessages[key];
      return acc;
    }, {});

  const handleToggleComplete = async (id) => {
    const docRef = doc(db, "schedule", id);
    await deleteDoc(docRef);
  };

  return (
    <Box className="md:p-5 w-full max-w-3xl mx-auto pt-20">
      <Head>
        <title>FVG</title>
        <meta name="description" content="Generated by create next app" />
        <link
          rel="apple-touch-icon"
          sizes="180x180"
          href="/apple-touch-icon.png"
        />
        <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
        <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
        <link rel="manifest" href="/site.webmanifest" />
        <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5" />
        <meta name="msapplication-TileColor" content="#da532c" />
        <meta name="theme-color" content="#ffffff" />
      </Head>
      <VStack spacing={6} pt={10} pb={12} align="start">
        <Heading as="h1" size="xl">Study List ðŸ“š</Heading>
        <Box as="form" onSubmit={submitMessage} w="full">
          <Flex mb={2} align="center" gap={2}>
            <Input
              placeholder="Your study plans"
              value={message.schedule_detail}
              onChange={(e) => setMessage({ ...message, schedule_detail: e.target.value })}
            />
            <IconButton
              icon={<FaCalendarAlt />}
              aria-label="Toggle Calendar"
              onClick={isOpen ? onClose : onOpen}
            />
            <IconButton
              icon={<FaPlus />}
              aria-label="Add"
              type="submit"
            />            
          </Flex>
          {isOpen && (
            <Box mb={2}>
              <Calendar
                onChange={setSelectedDate}
                value={selectedDate}
              />
            </Box>
          )}

        </Box>
        <Box w="full">
          {Object.entries(sortedGroupedMessages).map(([heading, plans]) => (
            <Box key={heading} mb={4}>
              <Box display="flex" alignItems="center" justifyContent="space-between">
                <Heading as="h2" size="md" mb={2}>{heading}</Heading>
             
              </Box>
              {plans.map((plan) => (
                <Box key={plan.id} mb={2} display="flex" alignItems="center" justifyContent="space-between">
                  <Box>{plan.schedule_detail}</Box>
                  <Button size="sm" onClick={() => handleToggleComplete(plan.id)}>
                    Complete
                  </Button>                     
                </Box>
              ))}
            </Box>
          ))}
        </Box>
      </VStack>
    </Box>
  );
};

export default StudySchedule;

